<?php

namespace Eship\EventBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BusinessGrowthRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessGrowthRepository extends EntityRepository
{
    /**
     * Query that returns a list of all the tuples in the business growth table for a specific business
     */
    public function getBusinessGrowthTracker($business_id, $stage)
    {
        return $this->createQueryBuilder('bg') //alias of the table
            ->andWhere('bg.business = :id_business') //condition of query
            ->andWhere('bg.stage = :stage') // condition of query
            ->leftJoin('bg.business', 'business') //left join of business_growth table and business table
            ->leftJoin('bg.counselor','counselor') //left join of business_growth table and counselor table
            ->addSelect('bg.bGrowthId', 'business.name', 'bg.stage', 'counselor.firstName',
                        'counselor.initial', 'counselor.lastName', 'bg.status') //Select clause of query
            ->setParameter('id_business', $business_id) //Parameter, used in the condition of the query.
                                                                // Done like this to avoid SQL injections
            ->setParameter('stage', $stage) //Parameter, used in the condition of the query.
                                                // Done like this to avoid SQL injections
            ->getQuery()
            ->execute(); //finish query
    }

    public function editBusinessGrowth($business_id, $stage, $task, $counselorId, $status)
    {
        $qb = $this->createQueryBuilder('bg')
            ->update()
            ->set('bg.status', ':statusParam') //condition of query
            ->set('bg.counselor', ':counselorParam') //condition of query
            ->andWhere('bg.business = :businessParam') //where clause
            ->andWhere('bg.stage = :stageParam') //where clause
            ->andWhere('bg.task = :taskParam') //where clause
            //Parameter, used in the condition of the query.
            // Done like this to avoid SQL injections
            ->setParameter('statusParam', $status)
            ->setParameter('counselorParam', $counselorId)
            ->setParameter('businessParam', $business_id)
            ->setParameter('stageParam', $stage)
            ->setParameter('taskParam', $task)
            ->getQuery()
            ->execute(); //finish query

        return 'Update Done Successfully';
    }
}
