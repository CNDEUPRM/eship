<?php

namespace Eship\EventBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BusinessGrowthRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessGrowthRepository extends EntityRepository
{
    public function getBusinessGrowthTracker($business_id, $stage)
    {
        return $this->createQueryBuilder('bg')
            ->andWhere('bg.business = :id_business')
            ->andWhere('bg.stage = :stage')
            ->leftJoin('bg.business', 'business')
            ->leftJoin('bg.counselor','counselor')
            ->addSelect('bg.bGrowthId', 'business.name', 'bg.stage', 'counselor.firstName',
                        'counselor.initial', 'counselor.lastName', 'bg.status')
            ->setParameter('id_business', $business_id)
            ->setParameter('stage', $stage)
            ->getQuery()
            ->execute();
    }

    public function editBusinessGrowth($business_id, $stage, $task, $counselorId, $status)
    {
        $qb = $this->createQueryBuilder('bg')
            ->update()
            ->set('bg.status', ':statusParam')
            //->set('bg.date', new \DateTime('now'))
            ->set('bg.counselor', ':counselorParam')
            ->andWhere('bg.business = :businessParam')
            ->andWhere('bg.stage = :stageParam')
            ->andWhere('bg.task = :taskParam')
            ->setParameter('statusParam', $status)
            ->setParameter('counselorParam', $counselorId)
            ->setParameter('businessParam', $business_id)
            ->setParameter('stageParam', $stage)
            ->setParameter('taskParam', $task)
            ->getQuery()
            ->execute();

        return 'Update Done Successfully';
    }
}
