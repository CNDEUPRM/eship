<?php

namespace Eship\EventBundle\Repository;

use Eship\EventBundle\Entity\Business;
use Eship\EventBundle\Entity\Counselor;
use Eship\EventBundle\Entity\MeetingReport;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Response;
use Doctrine\ORM\EntityRepository;

/**
 * MeetingReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MeetingReportRepository extends EntityRepository
{
    public function getMeetingReportList($business_id)
    {
        return $this->createQueryBuilder('mr')
            ->andWhere('mr.business = :idParam')
            ->leftJoin('mr.business', 'business')
            ->leftJoin('mr.counselor', 'counselor')
            ->addSelect('mr.reportId', 'mr.date' ,'business.name', 'counselor.firstName', 'counselor.lastName',
                        'counselor.initial', 'mr.stageOfDevelopment')
            ->addOrderBy('mr.date')
            ->addSelect('counselor')
            ->setParameter('idParam', $business_id)
            ->getQuery()
            ->execute();
    }

    //view a specific Meeting Report
    public function getMeetingReport($business_id, $report_id)
    {
        return $this->createQueryBuilder('mr')
            ->andWhere('mr.business = :id_business')
            ->andWhere('mr.reportId = :id_report')
            ->leftJoin('mr.business', 'business')
            ->leftJoin('mr.counselor', 'counselor')
            ->addSelect('mr.reportId', 'mr.date', 'mr.stageOfDevelopment', 'mr.discussedIssues',
                        'mr.suggestionsAndAgreements', 'mr.numberOfEmployees', 'mr.privateInvestment',
                        'mr.publicInvestment', 'mr.meetingDuration', 'mr.dateNextMeeting', 'mr.counselorPendingMatters',
                        'mr.clientPendingMatters', 'mr.pdfDocument', 'business.name', 'counselor.firstName',
                        'counselor.lastName', 'counselor.initial')
            ->setParameter('id_business', $business_id)
            ->setParameter('id_report', $report_id)
            ->getQuery()
            ->execute();
    }

    public function getMeetingReportStatisticsByDate($start, $end)
    {
        return $this->createQueryBuilder('mr')
            ->addSelect('SUM(mr.numberOfEmployees) as jobsCreated', 'SUM(mr.publicInvestment) as totalPublicInvestment',
                'SUM(mr.privateInvestment) as totalPrivateInvestment', 'SUM(mr.meetingDuration) as totalMeetingsDuration',
                'COUNT(mr.reportId) as totalMeetings')
            ->where('mr.date BETWEEN :start AND :end' )
            ->setParameter('start', $start)
            ->setParameter('end', $end)
            ->getQuery()
            ->execute();
    }

    public function getMeetingReportStatistics()
    {
        return $this->createQueryBuilder('mr')
            ->addSelect('SUM(mr.numberOfEmployees) as jobsCreated', 'SUM(mr.publicInvestment) as totalPublicInvestment',
                'SUM(mr.privateInvestment) as totalPrivateInvestment', 'SUM(mr.meetingDuration) as totalMeetingsDuration',
                'COUNT(mr.reportId) as totalMeetings')
            ->getQuery()
            ->execute();
    }

    public function getCounselorReport($id)
    {
        return $this->createQueryBuilder('mr')
            ->andWhere('mr.counselor = :idParam')
            ->addSelect('SUM(mr.numberOfEmployees) as jobsCreated', 'SUM(mr.publicInvestment) as totalPublicInvestment',
                'SUM(mr.privateInvestment) as totalPrivateInvestment', 'SUM(mr.meetingDuration) as totalMeetingsDuration')
            ->setParameter('idParam', $id)
            ->getQuery()
            ->execute();
    }


}

