<?php

namespace Eship\EventBundle\Repository;

use Eship\EventBundle\Entity\Business;
use Eship\EventBundle\Entity\Counselor;
use Eship\EventBundle\Entity\MeetingReport;
use Eship\EventBundle\Entity\WorkReport;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Response;
use Doctrine\ORM\EntityRepository;

/**
 * WorkReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WorkReportRepository extends EntityRepository
{
    public function getWorkReportList($business_id, $meetingReport_id)
    {
        return $this->createQueryBuilder('wr')
            ->andWhere('wr.business = :id_business')
            ->andWhere('wr.meetingReport = :id_report')
            ->leftJoin('wr.meetingReport', 'meetingReport')
            ->leftJoin('wr.business', 'business')
            ->leftJoin('wr.counselor', 'counselor')
            ->addSelect('wr.updateId', 'wr.date', 'meetingReport.reportId', 'business.name',
                        'counselor.firstName', 'counselor.lastName', 'counselor.initial')
            ->addSelect('business')
            ->addSelect('counselor')
            ->addOrderBy('wr.date')
            ->setParameter('id_business', $business_id)
            ->setParameter('id_report', $meetingReport_id)
            ->getQuery()
            ->execute();
    }

    //view a specific Meeting Report
    public function getWorkReport($business_id, $meetingReport_id, $update_id)
    {
        return $this->createQueryBuilder('wr')
            ->andWhere('wr.business = :id_business')
            ->andWhere('wr.meetingReport = :id_report')
            ->andWhere('wr.updateId = :id_update')
            ->leftJoin('wr.meetingReport', 'meetingReport')
            ->leftJoin('wr.business', 'business')
            ->leftJoin('wr.counselor', 'counselor')
            ->addSelect('wr.updateId', 'wr.date', 'wr.notes', 'wr.workedHours', 'wr.taskCompleted', 'wr.taskInProgress',
                'meetingReport.reportId', 'business.name', 'counselor.firstName', 'counselor.lastName', 'counselor.initial')
            ->addSelect('business')
            ->addSelect('counselor')
            ->setParameter('id_business', $business_id)
            ->setParameter('id_report', $meetingReport_id)
            ->setParameter('id_update', $update_id)
            ->getQuery()
            ->execute();
    }

    public function getWorkReportStatisticsByDate($start, $end)
    {
        return $this->createQueryBuilder('wr')
            ->addSelect('SUM(wr.workedHours) as totalWorkedHours',
                'COUNT(wr.updateId) as totalWorkReports')
            ->where('wr.date BETWEEN :start AND :end' )
            ->setParameter('start', $start)
            ->setParameter('end', $end)
            ->getQuery()
            ->execute();
    }

    public function getWorkReportStatistics()
    {
        return $this->createQueryBuilder('wr')
            ->addSelect('SUM(wr.workedHours) as totalWorkedHours',
                'COUNT(wr.updateId) as totalWorkReports')
            ->getQuery()
            ->execute();
    }
}
